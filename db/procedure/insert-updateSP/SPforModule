USE GENPROCSQL;
DELIMITER $$

CREATE PROCEDURE LT_DC_DCS_SP_Insert_Update_DC_Module (
    IN p_MODULE_ID INT,
    IN p_PROJECT_ID INT,
    IN p_MODULE_NAME VARCHAR(255),
    IN p_MODULE_DES VARCHAR(1000),
    IN p_C2C_User INT,
    IN p_C2C_Status BOOLEAN,
    IN p_C2C_Inactive_Reason VARCHAR(500),
    OUT p_LogicApps_Result VARCHAR(250)
)
BEGIN
    -- ===============================================================================
    -- Company: LogicAppsMI              Description: INSERT_UPDATE_MODULE
    -- Product name: DC                  Module name: DCS
    -- Date: 2025-10-29 15:25:00         Author name: Mohamed Thoufiq M, Ganesh
    -- ===============================================================================

    -- Variable Declarations
    DECLARE v_Record_Count INT DEFAULT 0;      -- Count of existing module names
    DECLARE v_Err_Msg VARCHAR(250);            -- Message holder for result

    -- Exception Handling
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        -- On SQL Error, set error message and rollback
        SELECT Error_Msg INTO v_Err_Msg
        FROM DCS_M_ERR_MESSAGE
        WHERE Error_Code = 'E1012'
        LIMIT 1;

        SET p_LogicApps_Result = v_Err_Msg;
        ROLLBACK;
    END;

    -- Start Transaction
    START TRANSACTION;

    -- Step 1: Check for duplicate module name in same project
    SELECT COUNT(*) INTO v_Record_Count
    FROM DCS_M_MODULE
    WHERE MODULE_NAME = p_MODULE_NAME
      AND PROJECT_ID = p_PROJECT_ID
      AND (p_MODULE_ID <= 0 OR MODULE_ID <> p_MODULE_ID);

    -- Step 2: Insert Logic - New Record, No Duplicate
    IF (p_MODULE_ID <= 0 AND v_Record_Count = 0) THEN
        
        -- Fetch success message for Insert
        SELECT Error_Msg INTO v_Err_Msg
        FROM DCS_M_ERR_MESSAGE
        WHERE Error_Code = 'S1010'
        LIMIT 1;

        -- Insert New Module Record
        INSERT INTO DCS_M_MODULE (
            PROJECT_ID,
            MODULE_NAME,
            MODULE_DES,
            C2C_Cdate,
            C2C_Cuser,
            C2C_Status,
            C2C_Inactive_Reason
        ) VALUES (
            p_PROJECT_ID,
            p_MODULE_NAME,
            p_MODULE_DES,
            CONVERT_TZ(NOW(), '+00:00', '+05:30'),
            p_C2C_User,
            p_C2C_Status,
            p_C2C_Inactive_Reason
        );

        SET p_LogicApps_Result = v_Err_Msg;  -- Return success message for Insert

    -- Step 3: Duplicate Check - Insert Attempt with Existing Name
    ELSEIF (p_MODULE_ID <= 0 AND v_Record_Count > 0) THEN
        
        -- Fetch duplicate error message
        SELECT Error_Msg INTO v_Err_Msg
        FROM DCS_M_ERR_MESSAGE
        WHERE Error_Code = 'E1011'
        LIMIT 1;

        SET p_LogicApps_Result = v_Err_Msg;  -- Return duplicate message

    -- Step 4: Update Logic - Existing Record, No Duplicate Name
    ELSEIF (p_MODULE_ID > 0 AND v_Record_Count = 0) THEN
        
        -- Fetch success message for Update
        SELECT Error_Msg INTO v_Err_Msg
        FROM DCS_M_ERR_MESSAGE
        WHERE Error_Code = 'S1011'
        LIMIT 1;

        -- Update Existing Module Record
        UPDATE DCS_M_MODULE
        SET
            PROJECT_ID = p_PROJECT_ID,
            MODULE_NAME = p_MODULE_NAME,
            MODULE_DES = p_MODULE_DES,
            C2C_Udate = CONVERT_TZ(NOW(), '+00:00', '+05:30'),
            C2C_Uuser = p_C2C_User,
            C2C_Status = p_C2C_Status,
            C2C_Inactive_Reason = p_C2C_Inactive_Reason
        WHERE MODULE_ID = p_MODULE_ID;

        SET p_LogicApps_Result = v_Err_Msg;  -- Return success message for Update

    -- Step 5: Duplicate Check - Update Attempt with Existing Name
    ELSEIF (p_MODULE_ID > 0 AND v_Record_Count > 0) THEN
        
        -- Fetch duplicate error message
        SELECT Error_Msg INTO v_Err_Msg
        FROM DCS_M_ERR_MESSAGE
        WHERE Error_Code = 'E1011'
        LIMIT 1;

        SET p_LogicApps_Result = v_Err_Msg;  -- Return duplicate message
    END IF;

    -- Commit Transaction
    COMMIT;
END$$

DELIMITER ;

